//array sorted or not
#include <iostream>
using namespace std;
bool sorted(int* arr, int n ,int i){
    //base case
    if(i==n-1)
       return true; 
     return (arr[i] <= arr[i + 1]) && sorted(arr, n, i + 1);
}
int main() {
  int n;
  cin>>n;
  int arr[n];
for(int i=0;i<n;i++){
    cin>>arr[i];
}
if(sorted(arr,n,0)){
    cout<<"sorted";
}else{
    cout<<"not sorted";
}
    return 0;
}
///fibonacci
#include <iostream>
using namespace std;
int fibonacci(int n){
      //base case
    if(n==0 || n==1)
 return n; 
return    fibonacci(n-1)+fibonacci(n-2);
}
int main() {
  int n;
  cin>>n;
 
int ans =fibonacci(n);
cout<<ans;

    return 0;
}
//fac
#include <iostream>
using namespace std;
int fac(int n){
      //base case
    if(n==0 )
 return 1; 
return n*fac(n-1);
}
int main() {
  int n;
  cin>>n;
 
int ans =fac(n);
cout<<ans;

    return 0;
}

//palindrome

#include <bits/stdc++.h>
using namespace std;
bool pal(string& s , int i){
    int n = s.length();
    
    if(i>n-1-i) 
        return 1 ;
    // base
    else{
        if(s[i]!=s[n-1-i]){
            return 0;
        }
        return pal(s,i+1);
    }
}
int main() {
    string s;
    cout<<"string" ;
    cin>>s;
    
cout<< pal(s ,0);
  
  

    return 0;
}
///power
#include <bits/stdc++.h>
using namespace std;
int power(int n , int p){
    //bases
    if(p==0)return 1;
    if(p==1)return n;
    if(p%2==0){
        return power(n,p/2)*power(n,p/2);
    }
    else{
        return n*power(n,p/2)*power(n,p/2);
    }
    }


int main() {
   int n,p ;
   cin>>n>>p;
cout<<power(n,p);
  
  

    return 0;
}
